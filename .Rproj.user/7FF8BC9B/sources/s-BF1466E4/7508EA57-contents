#' @title Rcpp functions.
#' @name test
#' @description just for test Rcpp function
#' @importFrom Rcpp evalCpp
#' @useDynLib StatComp20089
#' @examples
#' \dontrun{
#' cla(1,2,12)
#' }
NULL
#'
#'
#'
#' This is some descriptio of this function.
#' @title simple kenerl estimation function.
#' @description caculate the density of the specified bandwith
#'
#' @details the function can caculate the density of the specified bandwith
#'
#' @param y is sample data
#' @param h bandwidth
#' @param x the point you need estimate
#' @return density of x
#' @examples  \dontrun{
#' nkes(faithful$eruptions,0.5,3)
#' }
#' @export
nkes<- function(y,h,x){
  n <- length(y)
  ye <- 0
  for (i in 1:n){
    ye <- ye + as.numeric((x >= y[i] - h) & (x < y[i] + h))
  }
  ye <- ye / (2*h*n)
  return(ye)
}
#' This is some descriptio of this function.
#' @title plot naive kenel estimate
#'
#' @description plot the pic of naive kenel estimate
#'
#' @details plot the pic of naive kenel estimate with specified bandwith and selected number of estimated points.
#'
#' @param y is sample data
#'
#' @param N the number of estimate points
#'
#' @param h bandwith
#' @return a pic
#'
#' @examples  \dontrun{
#' nkesplot(faithful$eruptions,200,1)
#' }
#' @export
nkesplot<- function(y,N,h){
  y<- sort(y)
  x<- seq(y[1],y[length(y)],length.out = N)
  m <- length(x)
  n <- length(y)
  ye <- rep(0, m)
  for (i in 1:n){
    ye <- ye + as.numeric((x >= y[i] - h) & (x < y[i] + h))
  }
  ye <- ye / (2*h*n)
  plot(x,ye,type = 'l',ylab = 'density')
}
#'
